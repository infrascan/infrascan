import { 
    evaluateSelectorGlobally, 
    filterState, 
    formatEdge
} from "@infrascan/core";
import type { 
    Connector,
    SelectedEdge,
    SelectedEdgeTarget
} from "@infrascan/shared-types";
import debug from "debug";

const edgesDebug = debug("<%= service %>:edges");
export async function getEdges(stateConnector: Connector): Promise<SelectedEdge[]> {
    edgesDebug("Fetching edges");
    const edges: SelectedEdge[] = [];
    <%_ locals.edges.forEach(({ state, to, from }, idx) => { -%>
    <%_ const fnLabel = state.split('|')[1]; -%>
    <%_ const stateVariable = `${fnLabel}State${idx+1}`; -%>
    <%_ const edgesVariable = `${fnLabel}Edges${idx+1}`; -%>
    <%_ const escapedSelector = state.replaceAll('`', "\`"); -%>
    edgesDebug("Evaluating <%- state %>");
    const <%= stateVariable %> = await evaluateSelectorGlobally("<%- state %>", stateConnector);
    const <%= edgesVariable %> = <%= stateVariable %>.flatMap((state: any) => {
        const source = filterState(state, "<%- from %>");
        const target: SelectedEdgeTarget | SelectedEdgeTarget[] | null = filterState(state, "<%- to %>");
        if(!target || !source) {
            return [];
        }
        // Handle case of one to many edges
        if (Array.isArray(target)) {
            return target.map((edgeTarget) => formatEdge(source, edgeTarget));
        } else {
            return formatEdge(source, target);
        }
    });
    edgesDebug(`Evaluated <%- escapedSelector %>: ${<%= edgesVariable %>.length} Edges found`);
    edges.push(...<%= edgesVariable %>);
    <%_ }); -%>
    return edges;
}
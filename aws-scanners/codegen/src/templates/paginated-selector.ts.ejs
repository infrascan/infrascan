
export async function <%= getter.id ?? getter.fn %>(
    client: <%= serviceClientClass %>, 
    stateConnector: Connector, 
    context: AwsContext
): Promise<void> {
    const getterDebug = debug("<%= service %>:<%= getter.id ?? getter.fn %>");
    const state: GenericState[] = [];
    getterDebug("Fetching state");
    let pagingToken: string | undefined;
    do {
        const preparedParams: <%= getter.fn %>CommandInput = {};
        preparedParams["<%= getter.paginationToken.request %>"] = pagingToken;
        try {
            const cmd = new <%= getter.fn %>Command(preparedParams);
            const result: <%= getter.fn %>CommandOutput = await client.send(cmd);
            state.push({ _metadata: 
                { account: context.account, region: context.region, timestamp: new Date().toISOString() }, 
                _parameters: preparedParams, 
                _result: result 
            });
            pagingToken = result["<%= getter.paginationToken.response %>"];
            if(pagingToken != null) {
                getterDebug("Found pagination token in response");
            } else {
                getterDebug("No pagination token found in response");
            }
        } catch(err: unknown) {
            if(err instanceof <%= serviceErrorType %>) {
                if(err?.$retryable) {
                    console.log("Encountered retryable error", err);
                } else {
                    console.log("Encountered unretryable error", err);
                }
            } else {
                console.log("Encountered unexpected error", err);
            }
            pagingToken = undefined;
        }
    } while(pagingToken != null);
    getterDebug("Recording state");
    await stateConnector.onServiceScanCompleteCallback(context.account, context.region, "<%= clientKey %>", "<%= getter.id ?? getter.fn %>", state);
}
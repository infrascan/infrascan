import { Project, SourceFile, VariableDeclarationKind } from "ts-morph";
import type { ScannerDefinition } from "./types";

function addServiceScannerImport(sourceFile: SourceFile, service: string) {
  sourceFile.addImportDeclaration({
    namespaceImport: service,
    moduleSpecifier: `./${service}`,
  });
}

function declareScannerListAsConstant(
  sourceFile: SourceFile,
  services: ScannerDefinition[]
) {
  const globalServices = services.filter((service) => service.isGlobal);
  const globalServiceScanners = globalServices
    .map((importedService) => `${importedService.clientKey}.performScan`)
    .join(",");

  const regionalServices = services.filter((service) => !service.isGlobal);
  const regionalServiceScanners = regionalServices
    .map((importedService) => `${importedService.clientKey}.performScan`)
    .join(",");

  const globalScannersVariable = "GLOBAL_SERVICE_SCANNERS";
  sourceFile.addVariableStatement({
    declarationKind: VariableDeclarationKind.Const,
    declarations: [
      {
        name: globalScannersVariable,
        initializer: `[${globalServiceScanners}]`,
      },
    ],
  });

  const regionalScannersVariable = "REGIONAL_SERVICE_SCANNERS";
  sourceFile.addVariableStatement({
    declarationKind: VariableDeclarationKind.Const,
    declarations: [
      {
        name: regionalScannersVariable,
        initializer: `[${regionalServiceScanners}]`,
      },
    ],
  });

  sourceFile.addExportDeclaration({
    namedExports: [regionalScannersVariable, globalScannersVariable],
  });
}

export function generateEntrypoint(
  project: Project,
  basePath: string,
  services: ScannerDefinition[],
  verbose: boolean
) {
  const sourceFile = project.createSourceFile(`./${basePath}/index.ts`);

  sourceFile.insertText(
    0,
    "// This file is autogenerated using infrascan-codegen. Do not manually edit this file.\n"
  );
  for (let service of services) {
    addServiceScannerImport(sourceFile, service.clientKey);
  }
  // Create list of service modules imported
  declareScannerListAsConstant(sourceFile, services);

  sourceFile.formatText();
  if (verbose) {
    console.log(sourceFile.getFilePath());
    console.log(sourceFile.getText());
  }
  sourceFile.saveSync();
}

import {
  ECSClient,
  ListClustersCommandInput,
  ListClustersCommandOutput,
  ListClustersCommand,
  DescribeClustersCommandInput,
  DescribeClustersCommandOutput,
  DescribeClustersCommand,
} from "@aws-sdk/client-ecs";
import { scanIamRole, IAMStorage } from "../helpers/iam";
import { IAM } from "@aws-sdk/client-iam";
import { resolveFunctionCallParameters } from "../helpers/state";
import type {
  ServiceScanCompleteCallbackFn,
  ResolveStateForServiceFunction,
  GenericState,
} from "@infrascan/shared-types";
import type { AwsCredentialIdentityProvider } from "@aws-sdk/types";

// This file is autogenerated using infrascan-codegen. Do not manually edit this file.
async function performScan(
  credentials: AwsCredentialIdentityProvider,
  account: string,
  region: string,
  iamClient: IAM,
  iamStorage: IAMStorage,
  onServiceCallComplete: ServiceScanCompleteCallbackFn,
  resolveStateForServiceCall: ResolveStateForServiceFunction,
) {
  const ECS = new ECSClient({ region, credentials });
  const ListClustersState: GenericState[] = [];
  try {
    console.log("ecs ListClusters");
    let ListClustersPagingToken: string | undefined = undefined;
    do {
      const ListClustersCmd = new ListClustersCommand(
        {} as ListClustersCommandInput,
      );
      const result: ListClustersCommandOutput = await ECS.send(ListClustersCmd);
      ListClustersState.push({
        _metadata: { account, region },
        _parameters: {},
        _result: result,
      });
    } while (ListClustersPagingToken != null);
  } catch (err: any) {
    if (err?.retryable) {
      console.log("Encountered retryable error", err);
    } else {
      console.log("Encountered unretryable error", err);
    }
  }
  await onServiceCallComplete(
    account,
    region,
    "ECS",
    "ListClusters",
    ListClustersState,
  );

  const DescribeClustersState: GenericState[] = [];
  const DescribeClustersParameterResolvers = [
    { Key: "clusters", Selector: "ECS|ListClusters|[]._result.clusterArns" },
    {
      Key: "include",
      Value: [
        "ATTACHMENTS",
        "SETTINGS",
        "CONFIGURATIONS",
        "STATISTICS",
        "TAGS",
      ],
    },
  ];
  const DescribeClustersParameters = (await resolveFunctionCallParameters(
    account,
    region,
    DescribeClustersParameterResolvers,
    resolveStateForServiceCall,
  )) as DescribeClustersCommandInput[];
  for (const requestParameters of DescribeClustersParameters) {
    try {
      console.log("ecs DescribeClusters");
      let DescribeClustersPagingToken: string | undefined = undefined;
      do {
        const DescribeClustersCmd = new DescribeClustersCommand(
          requestParameters,
        );
        const result: DescribeClustersCommandOutput = await ECS.send(
          DescribeClustersCmd,
        );
        DescribeClustersState.push({
          _metadata: { account, region },
          _parameters: requestParameters,
          _result: result,
        });
      } while (DescribeClustersPagingToken != null);
    } catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      } else {
        console.log("Encountered unretryable error", err);
      }
    }
  }
  await onServiceCallComplete(
    account,
    region,
    "ECS",
    "DescribeClusters",
    DescribeClustersState,
  );
}

const NODE_SELECTORS = [
  "ECS|DescribeClusters|[]._result.clusters | [].{id:clusterArn,name:clusterName,info:@}",
];

export { performScan, NODE_SELECTORS };

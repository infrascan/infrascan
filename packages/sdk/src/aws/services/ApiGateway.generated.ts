import { ApiGatewayV2Client, GetApisCommandInput, GetApisCommandOutput, GetApisCommand, GetDomainNamesCommandInput, GetDomainNamesCommandOutput, GetDomainNamesCommand } from "@aws-sdk/client-apigatewayv2";
import { scanIamRole, IAMStorage } from "../helpers/iam";
import { IAM } from "@aws-sdk/client-iam";
import * as formatters from "../helpers/formatters";
import type { ServiceScanCompleteCallbackFn, ResolveStateFromServiceFn, GenericState } from "@infrascan/shared-types";
import type { AwsCredentialIdentityProvider } from "@aws-sdk/types";

// This file is autogenerated using infrascan-codegen. Do not manually edit this file.
async function performScan(credentials: AwsCredentialIdentityProvider, account: string, region: string, iamClient: IAM, iamStorage: IAMStorage, onServiceCallComplete: ServiceScanCompleteCallbackFn, resolveStateForServiceCall: ResolveStateFromServiceFn) {
  const ApiGatewayV2 = new ApiGatewayV2Client({ region, credentials });
  const GetApisState: GenericState[] = [];
  try {
    console.log("apigatewayv2 GetApis");
    let GetApisPagingToken: string | undefined = undefined;
    do {
      const GetApisCmd = new GetApisCommand({} as GetApisCommandInput);
      const result: GetApisCommandOutput = await ApiGatewayV2.send(GetApisCmd);
      const formattedResult = formatters.ApiGateway.getApis(result);
      GetApisState.push({ _metadata: { account, region }, _parameters: {}, _result: formattedResult });
    } while (GetApisPagingToken != null);
  }
  catch (err: any) {
    if (err?.retryable) {
      console.log("Encountered retryable error", err);
    }
  }
  await onServiceCallComplete(account, region, "ApiGatewayV2", "GetApis", GetApisState);

  const GetDomainNamesState: GenericState[] = [];
  try {
    console.log("apigatewayv2 GetDomainNames");
    let GetDomainNamesPagingToken: string | undefined = undefined;
    do {
      const GetDomainNamesCmd = new GetDomainNamesCommand({} as GetDomainNamesCommandInput);
      const result: GetDomainNamesCommandOutput = await ApiGatewayV2.send(GetDomainNamesCmd);
      const formattedResult = formatters.ApiGateway.getDomainNames(result);
      GetDomainNamesState.push({ _metadata: { account, region }, _parameters: {}, _result: formattedResult });
    } while (GetDomainNamesPagingToken != null);
  }
  catch (err: any) {
    if (err?.retryable) {
      console.log("Encountered retryable error", err);
    }
  }
  await onServiceCallComplete(account, region, "ApiGatewayV2", "GetDomainNames", GetDomainNamesState);

}

const NODE_SELECTORS = ["ApiGatewayV2|GetApis|[]._result | [].{id:ApiEndpoint}"];

export { performScan, NODE_SELECTORS };

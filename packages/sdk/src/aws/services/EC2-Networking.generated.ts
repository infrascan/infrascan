import {
  EC2Client,
  DescribeVpcsCommandInput,
  DescribeVpcsCommandOutput,
  DescribeVpcsCommand,
  DescribeAvailabilityZonesCommandInput,
  DescribeAvailabilityZonesCommandOutput,
  DescribeAvailabilityZonesCommand,
  DescribeSubnetsCommandInput,
  DescribeSubnetsCommandOutput,
  DescribeSubnetsCommand,
} from "@aws-sdk/client-ec2";
import { scanIamRole, IAMStorage } from "../helpers/iam";
import { IAM } from "@aws-sdk/client-iam";
import { Formatters } from "@infrascan/config";
import type {
  ServiceScanCompleteCallbackFn,
  ResolveStateForServiceFunction,
  GenericState,
} from "@infrascan/shared-types";
import type { AwsCredentialIdentityProvider } from "@aws-sdk/types";

// This file is autogenerated using infrascan-codegen. Do not manually edit this file.
async function performScan(
  credentials: AwsCredentialIdentityProvider,
  account: string,
  region: string,
  iamClient: IAM,
  iamStorage: IAMStorage,
  onServiceCallComplete: ServiceScanCompleteCallbackFn,
  resolveStateForServiceCall: ResolveStateForServiceFunction,
) {
  const EC2 = new EC2Client({ region, credentials });
  const DescribeVpcsState: GenericState[] = [];
  try {
    console.log("ec2 DescribeVpcs");
    let DescribeVpcsPagingToken: string | undefined = undefined;
    do {
      const DescribeVpcsCmd = new DescribeVpcsCommand(
        {} as DescribeVpcsCommandInput,
      );
      const result: DescribeVpcsCommandOutput = await EC2.send(DescribeVpcsCmd);
      const formattedResult = Formatters.EC2.describeVPCs(result);
      DescribeVpcsState.push({
        _metadata: { account, region },
        _parameters: {},
        _result: formattedResult,
      });
    } while (DescribeVpcsPagingToken != null);
  } catch (err: any) {
    if (err?.retryable) {
      console.log("Encountered retryable error", err);
    } else {
      console.log("Encountered unretryable error", err);
    }
  }
  await onServiceCallComplete(
    account,
    region,
    "EC2",
    "DescribeVpcs",
    DescribeVpcsState,
  );

  const DescribeAvailabilityZonesState: GenericState[] = [];
  try {
    console.log("ec2 DescribeAvailabilityZones");
    let DescribeAvailabilityZonesPagingToken: string | undefined = undefined;
    do {
      const DescribeAvailabilityZonesCmd = new DescribeAvailabilityZonesCommand(
        {} as DescribeAvailabilityZonesCommandInput,
      );
      const result: DescribeAvailabilityZonesCommandOutput = await EC2.send(
        DescribeAvailabilityZonesCmd,
      );
      const formattedResult = Formatters.EC2.describeAvailabilityZones(result);
      DescribeAvailabilityZonesState.push({
        _metadata: { account, region },
        _parameters: {},
        _result: formattedResult,
      });
    } while (DescribeAvailabilityZonesPagingToken != null);
  } catch (err: any) {
    if (err?.retryable) {
      console.log("Encountered retryable error", err);
    } else {
      console.log("Encountered unretryable error", err);
    }
  }
  await onServiceCallComplete(
    account,
    region,
    "EC2",
    "DescribeAvailabilityZones",
    DescribeAvailabilityZonesState,
  );

  const DescribeSubnetsState: GenericState[] = [];
  try {
    console.log("ec2 DescribeSubnets");
    let DescribeSubnetsPagingToken: string | undefined = undefined;
    do {
      const DescribeSubnetsCmd = new DescribeSubnetsCommand(
        {} as DescribeSubnetsCommandInput,
      );
      const result: DescribeSubnetsCommandOutput = await EC2.send(
        DescribeSubnetsCmd,
      );
      const formattedResult = Formatters.EC2.describeSubnets(result);
      DescribeSubnetsState.push({
        _metadata: { account, region },
        _parameters: {},
        _result: formattedResult,
      });
    } while (DescribeSubnetsPagingToken != null);
  } catch (err: any) {
    if (err?.retryable) {
      console.log("Encountered retryable error", err);
    } else {
      console.log("Encountered unretryable error", err);
    }
  }
  await onServiceCallComplete(
    account,
    region,
    "EC2",
    "DescribeSubnets",
    DescribeSubnetsState,
  );
}

export { performScan };

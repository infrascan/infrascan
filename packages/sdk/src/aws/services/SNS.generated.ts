import { SNSClient, ListTopicsCommandInput, ListTopicsCommandOutput, ListTopicsCommand, GetTopicAttributesCommandInput, GetTopicAttributesCommandOutput, GetTopicAttributesCommand, ListSubscriptionsByTopicCommandInput, ListSubscriptionsByTopicCommandOutput, ListSubscriptionsByTopicCommand, ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, ListTagsForResourceCommand } from "@aws-sdk/client-sns";
import { scanIamRole, IAMStorage } from "../helpers/iam";
import { IAM } from "@aws-sdk/client-iam";
import { resolveFunctionCallParameters } from "../helpers/state";
import { Formatters } from "@infrascan/config";
import type { ServiceScanCompleteCallbackFn, ResolveStateForServiceFunction, GenericState } from "@infrascan/shared-types";
import type { AwsCredentialIdentityProvider } from "@aws-sdk/types";

// This file is autogenerated using infrascan-codegen. Do not manually edit this file.
async function performScan(credentials: AwsCredentialIdentityProvider, account: string, region: string, iamClient: IAM, iamStorage: IAMStorage, onServiceCallComplete: ServiceScanCompleteCallbackFn, resolveStateForServiceCall: ResolveStateForServiceFunction) {
  const SNS = new SNSClient({ region, credentials });
  const ListTopicsState: GenericState[] = [];
  try {
    console.log("sns ListTopics");
    let ListTopicsPagingToken: string | undefined = undefined;
    do {
      const ListTopicsCmd = new ListTopicsCommand({} as ListTopicsCommandInput);
      const result: ListTopicsCommandOutput = await SNS.send(ListTopicsCmd);
      const formattedResult = Formatters.SNS.listTopics(result);
      ListTopicsState.push({ _metadata: { account, region }, _parameters: {}, _result: formattedResult });
    } while (ListTopicsPagingToken != null);
  }
  catch (err: any) {
    if (err?.retryable) {
      console.log("Encountered retryable error", err);
    }
    else {
      console.log("Encountered unretryable error", err);
    }
  }
  await onServiceCallComplete(account, region, "SNS", "ListTopics", ListTopicsState);

  const GetTopicAttributesState: GenericState[] = [];
  const GetTopicAttributesParameterResolvers = [{ "Key": "TopicArn", "Selector": "SNS|ListTopics|[]._result[].TopicArn" }];
  const GetTopicAttributesParameters = (await resolveFunctionCallParameters(account, region, GetTopicAttributesParameterResolvers, resolveStateForServiceCall)) as GetTopicAttributesCommandInput[];
  for (const requestParameters of GetTopicAttributesParameters) {
    try {
      console.log("sns GetTopicAttributes");
      let GetTopicAttributesPagingToken: string | undefined = undefined;
      do {
        const GetTopicAttributesCmd = new GetTopicAttributesCommand(requestParameters);
        const result: GetTopicAttributesCommandOutput = await SNS.send(GetTopicAttributesCmd);
        const formattedResult = Formatters.SNS.getTopicAttributes(result);
        GetTopicAttributesState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: formattedResult });
      } while (GetTopicAttributesPagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
      else {
        console.log("Encountered unretryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "SNS", "GetTopicAttributes", GetTopicAttributesState);

  const ListSubscriptionsByTopicState: GenericState[] = [];
  const ListSubscriptionsByTopicParameterResolvers = [{ "Key": "TopicArn", "Selector": "SNS|ListTopics|[]._result[].TopicArn" }];
  const ListSubscriptionsByTopicParameters = (await resolveFunctionCallParameters(account, region, ListSubscriptionsByTopicParameterResolvers, resolveStateForServiceCall)) as ListSubscriptionsByTopicCommandInput[];
  for (const requestParameters of ListSubscriptionsByTopicParameters) {
    try {
      console.log("sns ListSubscriptionsByTopic");
      let ListSubscriptionsByTopicPagingToken: string | undefined = undefined;
      do {
        const ListSubscriptionsByTopicCmd = new ListSubscriptionsByTopicCommand(requestParameters);
        const result: ListSubscriptionsByTopicCommandOutput = await SNS.send(ListSubscriptionsByTopicCmd);
        const formattedResult = Formatters.SNS.listSubscriptionByTopic(result);
        ListSubscriptionsByTopicState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: formattedResult });
      } while (ListSubscriptionsByTopicPagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
      else {
        console.log("Encountered unretryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "SNS", "ListSubscriptionsByTopic", ListSubscriptionsByTopicState);

  const ListTagsForResourceState: GenericState[] = [];
  const ListTagsForResourceParameterResolvers = [{ "Key": "ResourceArn", "Selector": "SNS|ListTopics|[]._result[].TopicArn" }];
  const ListTagsForResourceParameters = (await resolveFunctionCallParameters(account, region, ListTagsForResourceParameterResolvers, resolveStateForServiceCall)) as ListTagsForResourceCommandInput[];
  for (const requestParameters of ListTagsForResourceParameters) {
    try {
      console.log("sns ListTagsForResource");
      let ListTagsForResourcePagingToken: string | undefined = undefined;
      do {
        const ListTagsForResourceCmd = new ListTagsForResourceCommand(requestParameters);
        const result: ListTagsForResourceCommandOutput = await SNS.send(ListTagsForResourceCmd);
        ListTagsForResourceState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: result });
      } while (ListTagsForResourcePagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
      else {
        console.log("Encountered unretryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "SNS", "ListTagsForResource", ListTagsForResourceState);

}

const NODE_SELECTORS = ["SNS|ListTopics|[]._result[].{id:TopicArn}"];
const EDGE_SELECTORS = [{ "state": "SNS|ListSubscriptionsByTopic|[]", "from": "_parameters.TopicArn", "to": "_result[?Protocol!=`https` && Protocol!=`http` && Protocol!=`email` && Protocol!=`email-json` && Protocol!=`sms`] | [].{target:Endpoint,name:SubscriptionArn}" }];

export { performScan, NODE_SELECTORS, EDGE_SELECTORS };

import { ECSClient, ListServicesCommandInput, ListServicesCommandOutput, ListServicesCommand, DescribeServicesCommandInput, DescribeServicesCommandOutput, DescribeServicesCommand } from "@aws-sdk/client-ecs";
import { scanIamRole, IAMStorage } from "../helpers/iam";
import { IAM } from "@aws-sdk/client-iam";
import { resolveFunctionCallParameters } from "../helpers/state";
import type { ServiceScanCompleteCallbackFn, ResolveStateFromServiceFn, GenericState } from "@infrascan/shared-types";
import type { AwsCredentialIdentityProvider } from "@aws-sdk/types";

// This file is autogenerated using infrascan-codegen. Do not manually edit this file.
async function performScan(credentials: AwsCredentialIdentityProvider, account: string, region: string, iamClient: IAM, iamStorage: IAMStorage, onServiceCallComplete: ServiceScanCompleteCallbackFn, resolveStateForServiceCall: ResolveStateFromServiceFn) {
  const ECS = new ECSClient({ region, credentials });
  const ListServicesState: GenericState[] = [];
  const ListServicesParameterResolvers = [{ "Key": "cluster", "Selector": "ECS|ListClusters|[]._result.clusterArns[]" }, { "Key": "maxResults", "Value": 100 }];
  const ListServicesParameters = (await resolveFunctionCallParameters(account, region, ListServicesParameterResolvers, resolveStateForServiceCall)) as ListServicesCommandInput[];
  for (const requestParameters of ListServicesParameters) {
    try {
      console.log("ecs ListServices");
      let ListServicesPagingToken: string | undefined = undefined;
      do {
        const ListServicesCmd = new ListServicesCommand(requestParameters);
        const result: ListServicesCommandOutput = await ECS.send(ListServicesCmd);
        ListServicesState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: result });
      } while (ListServicesPagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "ECS", "ListServices", ListServicesState);

  const DescribeServicesState: GenericState[] = [];
  const DescribeServicesParameterResolvers = [{ "Key": "cluster", "Selector": "ECS|ListServices|[]._parameters.cluster" }, { "Key": "services", "Selector": "ECS|ListServices|[]._result.serviceArns" }, { "Key": "include", "Value": ["TAGS"] }];
  const DescribeServicesParameters = (await resolveFunctionCallParameters(account, region, DescribeServicesParameterResolvers, resolveStateForServiceCall)) as DescribeServicesCommandInput[];
  for (const requestParameters of DescribeServicesParameters) {
    try {
      console.log("ecs DescribeServices");
      let DescribeServicesPagingToken: string | undefined = undefined;
      do {
        const DescribeServicesCmd = new DescribeServicesCommand(requestParameters);
        const result: DescribeServicesCommandOutput = await ECS.send(DescribeServicesCmd);
        DescribeServicesState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: result });
      } while (DescribeServicesPagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "ECS", "DescribeServices", DescribeServicesState);

}

const NODE_SELECTORS = ["ECS|DescribeServices|[]._result.services | [].{id:serviceArn,parent:clusterArn,name:serviceName,info:@}"];

export { performScan, NODE_SELECTORS };

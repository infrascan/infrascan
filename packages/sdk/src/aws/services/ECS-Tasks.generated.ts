import { ECSClient, ListTasksCommandInput, ListTasksCommandOutput, ListTasksCommand, DescribeTasksCommandInput, DescribeTasksCommandOutput, DescribeTasksCommand, DescribeTaskDefinitionCommandInput, DescribeTaskDefinitionCommandOutput, DescribeTaskDefinitionCommand } from "@aws-sdk/client-ecs";
import { scanIamRole, IAMStorage } from "../helpers/iam";
import { IAM } from "@aws-sdk/client-iam";
import jmespath from "jmespath";
import { resolveFunctionCallParameters } from "../helpers/state";
import type { ServiceScanCompleteCallbackFn, ResolveStateFromServiceFn, GenericState } from "@infrascan/shared-types";
import type { AwsCredentialIdentityProvider } from "@aws-sdk/types";

// This file is autogenerated using infrascan-codegen. Do not manually edit this file.
async function performScan(credentials: AwsCredentialIdentityProvider, account: string, region: string, iamClient: IAM, iamStorage: IAMStorage, onServiceCallComplete: ServiceScanCompleteCallbackFn, resolveStateForServiceCall: ResolveStateFromServiceFn) {
  const ECS = new ECSClient({ region, credentials });
  const ListTasksState: GenericState[] = [];
  const ListTasksParameterResolvers = [{ "Key": "cluster", "Selector": "ECS|ListClusters|[]._result.clusterArns[]" }];
  const ListTasksParameters = (await resolveFunctionCallParameters(account, region, ListTasksParameterResolvers, resolveStateForServiceCall)) as ListTasksCommandInput[];
  for (const requestParameters of ListTasksParameters) {
    try {
      console.log("ecs ListTasks");
      let ListTasksPagingToken: string | undefined = undefined;
      do {
        const ListTasksCmd = new ListTasksCommand(requestParameters);
        const result: ListTasksCommandOutput = await ECS.send(ListTasksCmd);
        ListTasksState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: result });
      } while (ListTasksPagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "ECS", "ListTasks", ListTasksState);

  const DescribeTasksState: GenericState[] = [];
  const DescribeTasksParameterResolvers = [{ "Key": "cluster", "Selector": "ECS|ListTasks|[]._parameters.cluster" }, { "Key": "tasks", "Selector": "ECS|ListTasks|[]._result.taskArns" }];
  const DescribeTasksParameters = (await resolveFunctionCallParameters(account, region, DescribeTasksParameterResolvers, resolveStateForServiceCall)) as DescribeTasksCommandInput[];
  for (const requestParameters of DescribeTasksParameters) {
    try {
      console.log("ecs DescribeTasks");
      let DescribeTasksPagingToken: string | undefined = undefined;
      do {
        const DescribeTasksCmd = new DescribeTasksCommand(requestParameters);
        const result: DescribeTasksCommandOutput = await ECS.send(DescribeTasksCmd);
        DescribeTasksState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: result });
      } while (DescribeTasksPagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "ECS", "DescribeTasks", DescribeTasksState);

  const DescribeTaskDefinitionState: GenericState[] = [];
  const DescribeTaskDefinitionParameterResolvers = [{ "Key": "taskDefinition", "Selector": "ECS|DescribeTasks|[]._result.tasks[].taskDefinitionArn" }, { "Key": "include", "Value": ["TAGS"] }];
  const DescribeTaskDefinitionParameters = (await resolveFunctionCallParameters(account, region, DescribeTaskDefinitionParameterResolvers, resolveStateForServiceCall)) as DescribeTaskDefinitionCommandInput[];
  for (const requestParameters of DescribeTaskDefinitionParameters) {
    try {
      console.log("ecs DescribeTaskDefinition");
      let DescribeTaskDefinitionPagingToken: string | undefined = undefined;
      do {
        const DescribeTaskDefinitionCmd = new DescribeTaskDefinitionCommand(requestParameters);
        const result: DescribeTaskDefinitionCommandOutput = await ECS.send(DescribeTaskDefinitionCmd);
        DescribeTaskDefinitionState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: result });
        const iamRoleSelectors = ["taskDefinition.taskRoleArn", "taskDefinition.executionRoleArn"];
        for (const selector of iamRoleSelectors) {
          const selectionResult = jmespath.search(result, selector);
          if (Array.isArray(selectionResult)) {
            for (const roleArn of selectionResult) {
              await scanIamRole(iamStorage, iamClient, roleArn);
            }
          }
          else if (selectionResult != null) {
            await scanIamRole(iamStorage, iamClient, selectionResult);
          }
        }
      } while (DescribeTaskDefinitionPagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "ECS", "DescribeTaskDefinition", DescribeTaskDefinitionState);

}

const NODE_SELECTORS = ["ECS|DescribeServices|[]._result.services | [].{id:taskDefinition,parent:serviceArn}"];

export { performScan, NODE_SELECTORS };

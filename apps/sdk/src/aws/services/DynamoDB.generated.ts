import type { ServiceScanCompleteCallbackFn, ResolveStateFromServiceFn } from "@shared-types/api";
import type { GenericState } from "@shared-types/scan";
import type { AwsCredentialIdentityProvider } from "@aws-sdk/types";
import { DynamoDBClient, ListTablesCommandInput, ListTablesCommandOutput, ListTablesCommand, DescribeTableCommandInput, DescribeTableCommandOutput, DescribeTableCommand } from "@aws-sdk/client-dynamodb";
import { scanIamRole, IAMStorage } from "../helpers/iam";
import { IAM } from "@aws-sdk/client-iam";
import { resolveFunctionCallParameters } from "../helpers/state";
import * as formatters from "../helpers/formatters";

// This file is autogenerated using infrascan-codegen. Do not manually edit this file.
async function performScan(credentials: AwsCredentialIdentityProvider, account: string, region: string, iamClient: IAM, iamStorage: IAMStorage, onServiceCallComplete: ServiceScanCompleteCallbackFn, resolveStateForServiceCall: ResolveStateFromServiceFn) {
  const DynamoDB = new DynamoDBClient({ region, credentials });
  const ListTablesState: GenericState[] = [];
  try {
    console.log("dynamodb ListTables");
    let ListTablesPagingToken: string | undefined = undefined;
    do {
      const ListTablesCmd = new ListTablesCommand({} as ListTablesCommandInput);
      const result: ListTablesCommandOutput = await DynamoDB.send(ListTablesCmd);
      const formattedResult = formatters.DynamoDB.listTables(result);
      ListTablesState.push({ _metadata: { account, region }, _parameters: {}, _result: formattedResult });
    } while (ListTablesPagingToken != null);
  }
  catch (err: any) {
    if (err?.retryable) {
      console.log("Encountered retryable error", err);
    }
  }
  await onServiceCallComplete(account, region, "dynamodb", "ListTables", ListTablesState);

  const DescribeTableState: GenericState[] = [];
  const DescribeTableParameterResolvers = [{ "Key": "TableName", "Selector": "DynamoDB|ListTables|[]._result[]" }];
  const DescribeTableParameters = (await resolveFunctionCallParameters(account, region, DescribeTableParameterResolvers, resolveStateForServiceCall)) as DescribeTableCommandInput[];
  for (const requestParameters of DescribeTableParameters) {
    try {
      console.log("dynamodb DescribeTable");
      let DescribeTablePagingToken: string | undefined = undefined;
      do {
        const DescribeTableCmd = new DescribeTableCommand(requestParameters);
        const result: DescribeTableCommandOutput = await DynamoDB.send(DescribeTableCmd);
        const formattedResult = formatters.DynamoDB.describeTable(result);
        DescribeTableState.push({ _metadata: { account, region }, _parameters: requestParameters, _result: formattedResult });
      } while (DescribeTablePagingToken != null);
    }
    catch (err: any) {
      if (err?.retryable) {
        console.log("Encountered retryable error", err);
      }
    }
  }
  await onServiceCallComplete(account, region, "dynamodb", "DescribeTable", DescribeTableState);

}

const NODE_SELECTORS = ["DynamoDB|DescribeTable|[].{id:_result.TableArn}"];

export { performScan, NODE_SELECTORS };
